name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.1)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: rivet
            asset_name: rivet-linux-x86_64
            
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: rivet
            asset_name: rivet-macos-x86_64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: rivet
            asset_name: rivet-macos-arm64
            
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: rivet.exe
            asset_name: rivet-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Generate completions and man (Linux only)
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          set -euo pipefail
          BIN="target/${{ matrix.target }}/release/${{ matrix.artifact_name }}"
          mkdir -p artifacts/gen
          "$BIN" completions bash > artifacts/gen/rivet.bash
          "$BIN" completions zsh  > artifacts/gen/_rivet
          "$BIN" completions fish > artifacts/gen/rivet.fish
          "$BIN" completions powershell > artifacts/gen/rivet.ps1
          "$BIN" completions elvish    > artifacts/gen/rivet.elv
          "$BIN" man               > artifacts/gen/rivet.1

      - name: Upload completions/man (Linux only)
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        uses: actions/upload-artifact@v4
        with:
          name: rivet-completions-man
          path: artifacts/gen/*

      - name: Prepare artifact (Unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
          chmod +x artifacts/${{ matrix.asset_name }}

      - name: Prepare artifact (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} artifacts\${{ matrix.asset_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: artifacts/${{ matrix.asset_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            INP="${{ github.event.inputs.version }}"
            case "$INP" in
              v*) echo "VERSION=$INP" >> $GITHUB_OUTPUT ;;
              *)  echo "VERSION=v$INP" >> $GITHUB_OUTPUT ;;
            esac
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy and rename artifacts
          cp artifacts/rivet-linux-x86_64/rivet-linux-x86_64 release-assets/
          cp artifacts/rivet-macos-x86_64/rivet-macos-x86_64 release-assets/
          cp artifacts/rivet-macos-arm64/rivet-macos-arm64 release-assets/
          cp artifacts/rivet-windows-x86_64.exe/rivet-windows-x86_64.exe release-assets/
          # Include generated completions and man page (if present)
          if [ -d artifacts/rivet-completions-man ]; then
            cp artifacts/rivet-completions-man/* release-assets/
          fi
          ls -la release-assets

      - name: Create Windows ZIP with PowerShell completion
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          VERSION_STRIP_V="${VERSION#v}"
          mkdir -p tmp-zip
          cp release-assets/rivet-windows-x86_64.exe tmp-zip/rivet.exe
          if [ -f release-assets/rivet.ps1 ]; then
            cp release-assets/rivet.ps1 tmp-zip/rivet.ps1
          fi
          (cd tmp-zip && zip -9 ../release-assets/rivet-${VERSION}-windows-x86_64.zip *)
          rm -rf tmp-zip

      - name: Package Homebrew archives
        id: hb
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          VERSION_STRIP_V="${VERSION#v}"
          BASE_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}"

          mkdir -p tmp-pkg

          pkg() {
            local src="$1"; shift
            local outname="$1"; shift
            rm -rf tmp-pkg/rivet
            mkdir -p tmp-pkg/rivet
            cp "$src" tmp-pkg/rivet/rivet
            chmod +x tmp-pkg/rivet/rivet
            # include license and readme
            cp -f LICENSE README.md tmp-pkg/rivet/ 2>/dev/null || true
            tar -C tmp-pkg -czf "release-assets/${outname}" rivet
          }

          pkg "release-assets/rivet-macos-x86_64"    "rivet-${VERSION}-macos-x86_64.tar.gz"
          pkg "release-assets/rivet-macos-arm64"     "rivet-${VERSION}-macos-arm64.tar.gz"
          pkg "release-assets/rivet-linux-x86_64"    "rivet-${VERSION}-linux-x86_64.tar.gz"

          MAC_INTEL_SHA=$(sha256sum "release-assets/rivet-${VERSION}-macos-x86_64.tar.gz" | awk '{print $1}')
          MAC_ARM_SHA=$(sha256sum   "release-assets/rivet-${VERSION}-macos-arm64.tar.gz"    | awk '{print $1}')
          LINUX_SHA=$(sha256sum     "release-assets/rivet-${VERSION}-linux-x86_64.tar.gz"   | awk '{print $1}')

          FORMULA_PATH="release-assets/rivet.rb"
          cat > "$FORMULA_PATH" <<EOF
class Rivet < Formula
  desc "API testing that lives in git"
  homepage "https://github.com/${{ github.repository }}"
  version "${VERSION_STRIP_V}"
  license "MIT"

  on_macos do
    if Hardware::CPU.arm?
      url "${BASE_URL}/rivet-${VERSION}-macos-arm64.tar.gz"
      sha256 "${MAC_ARM_SHA}"
    else
      url "${BASE_URL}/rivet-${VERSION}-macos-x86_64.tar.gz"
      sha256 "${MAC_INTEL_SHA}"
    end
  end

  on_linux do
    url "${BASE_URL}/rivet-${VERSION}-linux-x86_64.tar.gz"
    sha256 "${LINUX_SHA}"
  end

  def install
    bin.install "rivet"
    # Install shell completions (bash, zsh, fish)
    (bash_completion/"rivet").write Utils.safe_popen_read(bin/"rivet", "completions", "bash")
    (zsh_completion/"_rivet").write Utils.safe_popen_read(bin/"rivet", "completions", "zsh")
    (fish_completion/"rivet.fish").write Utils.safe_popen_read(bin/"rivet", "completions", "fish")
    # Install man page
    (man1/"rivet.1").write Utils.safe_popen_read(bin/"rivet", "man")
  end

  test do
    system "#{bin}/rivet", "--version"
  end
end
EOF

          echo "mac_intel_sha=${MAC_INTEL_SHA}" >> $GITHUB_OUTPUT
          echo "mac_arm_sha=${MAC_ARM_SHA}" >> $GITHUB_OUTPUT
          echo "linux_sha=${LINUX_SHA}" >> $GITHUB_OUTPUT

      - name: Finalize checksums
        run: |
          cd release-assets
          sha256sum * > checksums.txt
          ls -la

      - name: Commit Homebrew formula to repo
        run: |
          set -e
          mkdir -p Formula
          cp release-assets/rivet.rb Formula/rivet.rb
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          if ! git diff --quiet -- Formula/rivet.rb; then
            git add Formula/rivet.rb
            git commit -m "chore(homebrew): update formula for ${{ steps.get_version.outputs.VERSION }}"
            git push
          else
            echo "No changes to formula."
          fi

      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          CHANGELOG_FILE="CHANGELOG_${VERSION}.md"
          
          # Create a basic changelog (you can customize this)
          cat > $CHANGELOG_FILE << 'EOF'
          ## 🚀 What's New in ${{ steps.get_version.outputs.VERSION }}
          
          ### ✨ Features
          - Improved test reporting capabilities
          - Enhanced HTML templates with interactive features
          - Better error handling and user experience
          
          ### 🛠️ Improvements
          - Performance optimizations
          - Code quality improvements
          - Updated dependencies
          
          ### 📦 Installation
          
          **macOS (Apple Silicon):**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/rivet-macos-arm64 -o rivet
          chmod +x rivet
          sudo mv rivet /usr/local/bin/
          ```
          
          **macOS (Intel):**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/rivet-macos-x86_64 -o rivet
          chmod +x rivet
          sudo mv rivet /usr/local/bin/
          ```
          
          **Linux:**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/rivet-linux-x86_64 -o rivet
          chmod +x rivet
          sudo mv rivet /usr/local/bin/
          ```
          
          **Windows:**
          Download `rivet-windows-x86_64.exe` and add to your PATH.
          
          ### 🔍 Verification
          Verify your download with checksums.txt
          
          ### 📊 Assets
          - `rivet-linux-x86_64` - Linux binary (x86_64)
          - `rivet-macos-x86_64` - macOS binary (Intel)
          - `rivet-macos-arm64` - macOS binary (Apple Silicon)
          - `rivet-windows-x86_64.exe` - Windows binary (x86_64)
          - `checksums.txt` - SHA256 checksums for verification
          EOF
          
          echo "CHANGELOG_FILE=$CHANGELOG_FILE" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Rivet CLI ${{ steps.get_version.outputs.VERSION }}
          body_path: ${{ steps.changelog.outputs.CHANGELOG_FILE }}
          files: |
            release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt -- --check
