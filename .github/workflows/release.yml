name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.1)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: rivet
            asset_name: rivet-linux-x86_64
            
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: rivet
            asset_name: rivet-macos-x86_64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: rivet
            asset_name: rivet-macos-arm64
            
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: rivet.exe
            asset_name: rivet-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
          chmod +x artifacts/${{ matrix.asset_name }}

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} artifacts\${{ matrix.asset_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: artifacts/${{ matrix.asset_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy and rename artifacts
          cp artifacts/rivet-linux-x86_64/rivet-linux-x86_64 release-assets/
          cp artifacts/rivet-macos-x86_64/rivet-macos-x86_64 release-assets/
          cp artifacts/rivet-macos-arm64/rivet-macos-arm64 release-assets/
          cp artifacts/rivet-windows-x86_64.exe/rivet-windows-x86_64.exe release-assets/
          
          # Create checksums
          cd release-assets
          sha256sum * > checksums.txt
          ls -la

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          CHANGELOG_FILE="CHANGELOG_${VERSION}.md"
          
          # Create a basic changelog (you can customize this)
          cat > $CHANGELOG_FILE << 'EOF'
          ## 🚀 What's New in ${{ steps.get_version.outputs.VERSION }}
          
          ### ✨ Features
          - Improved test reporting capabilities
          - Enhanced HTML templates with interactive features
          - Better error handling and user experience
          
          ### 🛠️ Improvements
          - Performance optimizations
          - Code quality improvements
          - Updated dependencies
          
          ### 📦 Installation
          
          **macOS (Apple Silicon):**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/rivet-macos-arm64 -o rivet
          chmod +x rivet
          sudo mv rivet /usr/local/bin/
          ```
          
          **macOS (Intel):**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/rivet-macos-x86_64 -o rivet
          chmod +x rivet
          sudo mv rivet /usr/local/bin/
          ```
          
          **Linux:**
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/rivet-linux-x86_64 -o rivet
          chmod +x rivet
          sudo mv rivet /usr/local/bin/
          ```
          
          **Windows:**
          Download `rivet-windows-x86_64.exe` and add to your PATH.
          
          ### 🔍 Verification
          Verify your download with checksums.txt
          
          ### 📊 Assets
          - `rivet-linux-x86_64` - Linux binary (x86_64)
          - `rivet-macos-x86_64` - macOS binary (Intel)
          - `rivet-macos-arm64` - macOS binary (Apple Silicon)
          - `rivet-windows-x86_64.exe` - Windows binary (x86_64)
          - `checksums.txt` - SHA256 checksums for verification
          EOF
          
          echo "CHANGELOG_FILE=$CHANGELOG_FILE" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Rivet CLI ${{ steps.get_version.outputs.VERSION }}
          body_path: ${{ steps.changelog.outputs.CHANGELOG_FILE }}
          files: |
            release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt -- --check